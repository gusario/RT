
#ifndef KERNEL_H
# define KERNEL_H

# define SEPIA 0x704214
typedef struct			s_ray
{
	float3				origin;
	float3				dir;
	float				t;
}						t_ray;

typedef struct 			s_material
{
	float3				color;
	float3				emission;
}						t_material;

typedef struct s_txture
{
	int					width;
	int					height;
	int					texture[0x1011 * 0x1012];
}						t_txture;


typedef struct			s_intersection
{
	t_ray				ray;
	float3				hitpoint;
	float3				normal;
	t_material			material;
	int 				object_id;
}						t_intersection;


typedef enum e_figure
{
	 SPHERE, CYLINDER, CONE, PLANE, TRIANGLE, TORUS, PARABOLOID
}						t_type;

typedef struct			s_object
{
	t_type				type;
	float				radius;
	float				tor_radius;
	float3				position;
	float3				color;
	float3				emission;
	float3				v;
	float				metalness;
	int					texture;
	int					normal;
	float3				vertices[3];
	int					is_visible;
	float2				shift;
	float3				basis[3];
	float2				prolapse;
	int					id;
	float				transparency;
	float				refraction;
	float3				composed_pos;
	float3				composed_v;
	int					is_negative;
}						t_obj;

typedef struct 			s_cam
{
	float3				position;
	float3				direction;
	float3				normal;
	float				fov;
	float3				border_x;
	float3				border_y;
	int					id;
	int					cartoon;
	int					sepia;
	int					stereo;
	float				motion_blur;
	float				ambience;
	int					mask_size;
}						t_cam;

typedef struct			s_scene
{
	__global t_obj		*objects;
	int					n_objects;
	unsigned int		x_coord;
	unsigned int		y_coord;
	int					width;
	int					height;
	int					samples;
	__global ulong		*random;
	__global t_txture	*textures;
	__global t_txture	*normals;
	t_cam				camera;
	int					lightsampling;
	int					global_texture_id;
}						t_scene;

typedef struct			s_quad
{
	float a;
	float b;
	float c;
	float d;
	float res;
}						t_quad;


float 					cl_float3_max(float3 v);
float3					cl_int_to_float3(int i);
float 					cl_float3_min(float3 v);
float3 					get_normal(t_obj *object, t_intersection *intersection, float2 *coord, t_scene *scene);
float3					global_texture(t_ray *ray, t_scene *scene);
void 					print_debug(int samples, int width, t_scene *scene);
void 					print_ray(t_scene *scene, t_ray* ray);
float3 					reflect(float3 vector, float3 n);
float3 					refract(float3 vector, float3 n, float refrIndex);
float3					normal_map(t_obj *object, t_intersection *intersection, float3 normal, float2 *coord, t_scene *scene);
float3					get_color(t_obj *object, float3 hitpoint, t_scene *scene, float2 *coord);
#endif
